name: dronecan
on:
  push:
    branches:
    - main
  pull_request:
    branches:
    - '*'
jobs:
  stm32f103:
    strategy:
      matrix:
        include:
          - os: ubuntu-22.04
            platform: v2
          - os: ubuntu-22.04
            platform: v3
          - os: windows-latest
            platform: v2
    runs-on: ${{ matrix.os }}
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Install dependencies
        run: |
          python -m pip install -r requirements.txt
          if [ "${{ runner.os }}" == "Linux" ]; then
            sudo apt-get install -y gcc-arm-none-eabi
          elif [ "${{ runner.os }}" == "Windows" ]; then
            choco install -y gcc-arm-embedded make cmake
          fi
        shell: bash

      - name: Build DroneCAN binary
        run: make dronecan_${{ matrix.platform }}

      - name: Upload .bin file
        if: matrix.os == 'ubuntu-22.04' && matrix.platform == 'v2'
        uses: actions/upload-artifact@v3
        with:
          name: dronecan_firmware.bin
          path: build/dronecan_${{ matrix.platform }}/obj/example.bin

  sitl:
    runs-on: ubuntu-22.04
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          sudo apt-get install -y gcc-arm-none-eabi linux-modules-extra-$(uname -r)

      - name: Build SITL DroneCAN
        run: make sitl_dronecan

      - name: Run SITL for 5 seconds
        run: timeout 5s make run || res=$?; if [[ $res -ne 124 && $res -ne 0 ]]; then exit $res; fi